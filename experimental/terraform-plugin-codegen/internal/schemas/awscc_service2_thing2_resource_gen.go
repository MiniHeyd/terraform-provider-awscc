// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package schemas

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AwsccService2Thing2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"attr1": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"attr2": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"attr3": schema.BoolAttribute{
								Required: true,
							},
						},
						CustomType: Attr2Type{
							ObjectType: types.ObjectType{
								AttrTypes: Attr2Value{}.AttributeTypes(ctx),
							},
						},
						Required: true,
					},
				},
				CustomType: Attr1Type{
					ObjectType: types.ObjectType{
						AttrTypes: Attr1Value{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
		},
	}
}

type AwsccService2Thing2Model struct {
	Attr1 Attr1Value `tfsdk:"attr1"`
}

var _ basetypes.ObjectTypable = Attr1Type{}

type Attr1Type struct {
	basetypes.ObjectType
}

func (t Attr1Type) Equal(o attr.Type) bool {
	other, ok := o.(Attr1Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Attr1Type) String() string {
	return "Attr1Type"
}

func (t Attr1Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attr2Attribute, ok := attributes["attr2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attr2 is missing from object`)

		return nil, diags
	}

	attr2Val, ok := attr2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attr2 expected to be basetypes.ObjectValue, was: %T`, attr2Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Attr1Value{
		Attr2: attr2Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAttr1ValueNull() Attr1Value {
	return Attr1Value{
		state: attr.ValueStateNull,
	}
}

func NewAttr1ValueUnknown() Attr1Value {
	return Attr1Value{
		state: attr.ValueStateUnknown,
	}
}

func NewAttr1Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Attr1Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Attr1Value Attribute Value",
				"While creating a Attr1Value value, a missing attribute value was detected. "+
					"A Attr1Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attr1Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Attr1Value Attribute Type",
				"While creating a Attr1Value value, an invalid attribute value was detected. "+
					"A Attr1Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attr1Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Attr1Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Attr1Value Attribute Value",
				"While creating a Attr1Value value, an extra attribute value was detected. "+
					"A Attr1Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Attr1Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttr1ValueUnknown(), diags
	}

	attr2Attribute, ok := attributes["attr2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attr2 is missing from object`)

		return NewAttr1ValueUnknown(), diags
	}

	attr2Val, ok := attr2Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attr2 expected to be basetypes.ObjectValue, was: %T`, attr2Attribute))
	}

	if diags.HasError() {
		return NewAttr1ValueUnknown(), diags
	}

	return Attr1Value{
		Attr2: attr2Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAttr1ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Attr1Value {
	object, diags := NewAttr1Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttr1ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Attr1Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttr1ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttr1ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttr1ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttr1ValueMust(Attr1Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Attr1Type) ValueType(ctx context.Context) attr.Value {
	return Attr1Value{}
}

var _ basetypes.ObjectValuable = Attr1Value{}

type Attr1Value struct {
	Attr2 basetypes.ObjectValue `tfsdk:"attr2"`
	state attr.ValueState
}

func (v Attr1Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["attr2"] = basetypes.ObjectType{
		AttrTypes: Attr2Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Attr2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attr2"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Attr1Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Attr1Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Attr1Value) String() string {
	return "Attr1Value"
}

func (v Attr1Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var attr2 basetypes.ObjectValue

	if v.Attr2.IsNull() {
		attr2 = types.ObjectNull(
			Attr2Value{}.AttributeTypes(ctx),
		)
	}

	if v.Attr2.IsUnknown() {
		attr2 = types.ObjectUnknown(
			Attr2Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Attr2.IsNull() && !v.Attr2.IsUnknown() {
		attr2 = types.ObjectValueMust(
			Attr2Value{}.AttributeTypes(ctx),
			v.Attr2.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"attr2": basetypes.ObjectType{
				AttrTypes: Attr2Value{}.AttributeTypes(ctx),
			},
		},
		map[string]attr.Value{
			"attr2": attr2,
		})

	return objVal, diags
}

func (v Attr1Value) Equal(o attr.Value) bool {
	other, ok := o.(Attr1Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attr2.Equal(other.Attr2) {
		return false
	}

	return true
}

func (v Attr1Value) Type(ctx context.Context) attr.Type {
	return Attr1Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Attr1Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attr2": basetypes.ObjectType{
			AttrTypes: Attr2Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = Attr2Type{}

type Attr2Type struct {
	basetypes.ObjectType
}

func (t Attr2Type) Equal(o attr.Type) bool {
	other, ok := o.(Attr2Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Attr2Type) String() string {
	return "Attr2Type"
}

func (t Attr2Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attr3Attribute, ok := attributes["attr3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attr3 is missing from object`)

		return nil, diags
	}

	attr3Val, ok := attr3Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attr3 expected to be basetypes.BoolValue, was: %T`, attr3Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Attr2Value{
		Attr3: attr3Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAttr2ValueNull() Attr2Value {
	return Attr2Value{
		state: attr.ValueStateNull,
	}
}

func NewAttr2ValueUnknown() Attr2Value {
	return Attr2Value{
		state: attr.ValueStateUnknown,
	}
}

func NewAttr2Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Attr2Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Attr2Value Attribute Value",
				"While creating a Attr2Value value, a missing attribute value was detected. "+
					"A Attr2Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attr2Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Attr2Value Attribute Type",
				"While creating a Attr2Value value, an invalid attribute value was detected. "+
					"A Attr2Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Attr2Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Attr2Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Attr2Value Attribute Value",
				"While creating a Attr2Value value, an extra attribute value was detected. "+
					"A Attr2Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Attr2Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttr2ValueUnknown(), diags
	}

	attr3Attribute, ok := attributes["attr3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attr3 is missing from object`)

		return NewAttr2ValueUnknown(), diags
	}

	attr3Val, ok := attr3Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attr3 expected to be basetypes.BoolValue, was: %T`, attr3Attribute))
	}

	if diags.HasError() {
		return NewAttr2ValueUnknown(), diags
	}

	return Attr2Value{
		Attr3: attr3Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewAttr2ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Attr2Value {
	object, diags := NewAttr2Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttr2ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Attr2Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttr2ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttr2ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttr2ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttr2ValueMust(Attr2Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Attr2Type) ValueType(ctx context.Context) attr.Value {
	return Attr2Value{}
}

var _ basetypes.ObjectValuable = Attr2Value{}

type Attr2Value struct {
	Attr3 basetypes.BoolValue `tfsdk:"attr3"`
	state attr.ValueState
}

func (v Attr2Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["attr3"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Attr3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attr3"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Attr2Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Attr2Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Attr2Value) String() string {
	return "Attr2Value"
}

func (v Attr2Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"attr3": basetypes.BoolType{},
		},
		map[string]attr.Value{
			"attr3": v.Attr3,
		})

	return objVal, diags
}

func (v Attr2Value) Equal(o attr.Value) bool {
	other, ok := o.(Attr2Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Attr3.Equal(other.Attr3) {
		return false
	}

	return true
}

func (v Attr2Value) Type(ctx context.Context) attr.Type {
	return Attr2Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Attr2Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attr3": basetypes.BoolType{},
	}
}
